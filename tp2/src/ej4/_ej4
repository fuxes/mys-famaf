from __future__ import division
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import numpy as np
from collections import defaultdict
from math import log, floor
import math
from random import random
from pprint import pprint 
from scipy import stats
N = 500

exp = lambda l: -log(random())/l

def normal(m, s):
    x = exp(1)
    y = exp(1)
    while (y - pow(x - 1, 2)/2 <= 0):
        x = exp(1)
        y = exp(1)
    u = random()
    if (u <= 0.5):
        z = x
    else:
        z = -x
    return  float(m + s * z)

def lognormal(m ,s):
    n = m + s * normal(0.0, 1.0)
    return math.exp(n)

def gamma(n, lamb):
    r = 0
    for _ in range(int(n)):
        r += log(random())
    return - r / lambd

# Ganancias Histogram
if __name__ == "__main__":
    values = [ float(x.strip()) for x in open("ganancia-ins-500.dat")]

    # Generar VA Normales
    mn = 366.1275
    sn = 4.0549
    normals = []
    for _ in range(N):
        normals.append(int(normal(mn, sn)))

    # Generar VA LogNormales
    mln = 5.902920
    sln = 0.011105
    lognormals = []
    for _ in range(N):
        lognormals.append(int(lognormal(mln, sln)))

    # Generar VA Gamma
    alpha = 8139.516936
    lambd = 22.231367
    gammas = []
    for _ in range(N):
        gammas.append(int(gamma(floor(alpha), lambd)))

    bins = [i for i in range(int(min(values)), int(max(values)+1))]
    params = dict(bins=bins, normed=True, alpha=0.5, width=0.4)
    points = np.linspace(min(values),max(values),200)

    plt.subplot(2,1,1)
    plt.hist(values, **params)

    distNormal = stats.norm(loc=mn, scale=sn)
    plt.plot(points, distNormal.pdf(points), color='red', label=u'Ajuste normal', 
    linewidth=2.0)

    plt.subplot(2,1,2)
    plt.hist(values, **params)

    distLognormal = stats.lognorm(0, loc=mln, scale=sln)
    plt.plot(points, distLognormal.pdf(points), color='red', label=u'Ajuste normal', 
    linewidth=2.0)

    lognormals = np.random.lognormal(mln, sln, 500)
    count, bins, ign = plt.hist(lognormals, 100, normed=True, align='mid')


    """
    plt.subplot(3,1,2)
    plt.hist((values, lognormals), **params)
    plt.subplot(3,1,3)
    plt.hist((values, gammas), **params)
    """
    plt.show()

    """
    c = defaultdict(lambda: 0)
    for v in values:
        c[int(v)] += 1

    for i in range(min(c.keys()), max(c.keys())+1):
        c[i] = c[i] / 500 
    """
